/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'tinygone' at '17-1-6 上午12:01' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile (
    	['org.slf4j:slf4j-api:1.7.21'],
    	['ch.qos.logback:logback-core:1.1.7'],
    	['ch.qos.logback:logback-classic:1.1.7'],
    	['log4j:log4j:1.2.17'],
    	['org.jsonschema2pojo:jsonschema2pojo-core:0.4.23'],
    	['org.springframework:spring-webmvc:4.2.6.RELEASE'],
    	['org.springframework:spring-tx:4.2.6.RELEASE'],
    	['org.springframework:spring-jdbc:4.2.6.RELEASE'],
    	['org.springframework:spring-test:4.2.6.RELEASE'],
    	['org.springframework:spring-aspects:4.2.6.RELEASE'],
    	['javax.servlet:jstl:1.2'],
    	['commons-lang:commons-lang:2.6'],
    	['org.apache.commons:commons-collections4:4.1'],
    	['org.apache.commons:commons-lang3:3.5'],
    	['org.jdom:jdom2:2.0.6'],
    	['commons-dbcp:commons-dbcp:1.4'],
    	['commons-fileupload:commons-fileupload:1.3.2'],
    	['io.netty:netty:3.6.3.Final'],
    	['com.alibaba:fastjson:1.2.12'],
    	['com.alibaba:druid:1.0.20'],
    	['redis.clients:jedis:2.8.1'],
    	['org.mybatis:mybatis:3.3.1'],
    	['org.mybatis:mybatis-spring:1.2.5'],
    	['mysql:mysql-connector-java:5.1.39'],
    	['org.glassfish.jersey.core:jersey-server:2.23'],
    	['org.glassfish.jersey.core:jersey-common:2.23'],
    	['org.glassfish.jersey.core:jersey-client:2.23'],
    	['org.glassfish.jersey.ext:jersey-spring3:2.23'],
    	['org.glassfish.jersey.media:jersey-media-json-jackson:2.23'],
    	//['org.glassfish.jersey.media:jersey-json:2.23'],
		['com.fasterxml.jackson.core:jackson-core:2.7.4'],
		['com.fasterxml.jackson.core:jackson-annotations:2.7.4'],
		['javax.servlet.jsp:jsp-api:2.2.1-b03'],
		['javax.servlet:javax.servlet-api:3.1.0'],
		['com.fasterxml.jackson.core:jackson-databind:2.7.4'],
		['com.qcloud:cos_api:3.3'],
		//http
		['org.apache.httpcomponents:httpcomponents-client:4.5.2'],
		['org.apache.httpcomponents:httpcore:4.4.5'],
		['joda-time:joda-time:2.9.7']
		
    	)

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
eclipse.classpath.file {
    withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
    }
}

//For Eclipse IDE only
eclipse {

  wtp {
    component {
      
      //define context path, default to project folder name
      contextPath = 'mylib'
      
    }
    
  }
}

